#Mapping of Stanford dependency relations to 4lang edges.
#
#The line "rel TAB i,j" means the dependency relation rel(x,y) should convert
#to an arrow of color i pointing from x to y and an arrow of color j pointing
#from y to x. "-" means no arrow, "?" means undecided or ambiguous.
#
#Further TAB separated fields may specify binary relations that should hold
#between x and y, the order can be reversed with "!". E.g. HAS will trigger
#x HAS y, !HAS will trigger Y HAS X

acomp	0,-
advcl	?,-
advmod	0,-
agent	1,-
amod	0,-
appos	0,0
aux	-,-
auxpass	-,-

cc	-,-
#each coordinated element appears in its own relations

conj	-,-
conj_and	-,-
conj_as	-,-
conj_but	-,-
conj_if	-,-
conj_in	-,-
conj_less	-,-
conj_negcc	-,-
conj_nor	-,-
conj_of	-,-
conj_or	-,-
#each coordinated element appears in its own relations
conj_so	-,-
conj_whether	-,-

cop	-,-
#but will be necessary to disambiguate nsubj and csubj

csubj	1,0
#1,0 for copular sentences, 1,- otherwise (just like with nsubj)

csubjpass	2,-
dep	0,-

det	?,?
#Articles will probably trigger some direct action and not have their own nodes
#in the graph

discourse	-,-

dobj	2,-

expl	-,-
#We shouldn't have to do anything extra here if our theory is perfect, right?

iobj	?,?
#I guess we deny that these really exist.

mwe	-,-
#We should handle each of these uniquely

neg	0,-
#Mostly X -0-> "not". "no", "never", and "n't" are posptrocessed into "not"

nn	-,-
# "there is no intelligent noun compund analysis. This is likely to be fixed
# once the Penn Treebank represents the branching structure of NPs"
# Until then, this should trigger our own noun compound analysis
# Until we have that, do nothing

npadvmod	0,-

nsubj	1,0
# 1,0 for copular sentences, 1,- otherwise (just like with csubj)

nsubjpass	2,-
num	0,-

number	?,?
#Wouldn't load this on the machine framework

parataxis	?,?
#need to see more examples first, might be handled at the sentence tokenization
#level

#partmod	?,?
#(obsoleted by vmod)

pcomp	2,-
pobj	2,-

poss	-,-	!HAS
#x HAS y

possessive	-,-

preconj	-,-
predet	-,-
#These two can trigger something once we have quantification...

prep	-,-
prep_about	-,-
prep_after	-,-	AFTER
prep_around	-,-
prep_as	-,-
prep_between	-,-
prep_by	-,-
prep_during	-,-

#This'll be horribly wrong in some cases, e.g. "bread stays soft for several days"
prep_for	-,-	FOR
prep_from	-,-	from

prep_in	-,-	IN
prep_into	-,-

prep_like	-,-
prep_next_to	-,-

#wrong in many cases: in charge of, one of two, group of people (?)
prep_of	-,-	!HAS

prep_on	-,-

#we don't really have this, but I didn't know what to do. Perhaps "not" and IN combined somehow, but we don't have the syntax for it, plus we don't know how negation works

#This is just a few of the prep(c)s, the rest are listed at the end of the file

prep_according_to	-,-
prep_at	-,-
prep_compared_with	-,-
prep_containing	-,-
prep_out_of	-,-	NOTIN
prep_outside_of	-,-
prep_over	-,-
prep_starting	-,-
prep_such_as	-,-
prep_than	-,-
prep_to	-,-
prep_towards	-,-
prep_with	-,-	INSTRUMENT
prep_within	-,-

prepc_about	-,-
prepc_as	-,-
prepc_as_for	-,-
prepc_by	-,-
prepc_for	-,-
prepc_from	-,-
prepc_next_to	-,-
prepc_of	-,-
prepc_out	-,-
prepc_regardless_of	-,-	regardless
prepc_in	-,-	IN
prepc_since	-,-
prepc_smooth	-,-
prepc_whether	-,-
prepc_with	-,-
prepc_without	-,-	LACK

prt	0,-
punct	-,-

#purpcl	-,-
#(obsoleted by advcl)
#Maybe y CAUSE x, or do we have something standard for GOAL?

quantmod	-,-
#No quantification yet...

rcmod	-,-
# cannot be handled uniformly, we handle these in dependency_processor

ref	-,-

root	-,-
#tells us what the predicate is

tmod	-,-	AT
#x AT y

vmod	?,?
#This should be two relations based on the role of the first element
# "Truffles picked during the spring are tasty"	
# partmod(truffles, picked)	-,2
# "Bill tried to shoot demonstrating his incompetence
# partmod(shoot, demonstrating) 0,1


xcomp	2,-

xsubj	1,-


prep_above	-,-
prep_across	-,-
prep_against	-,-
prep_ahead_of	-,-
prep_along	-,-
prep_among	-,-
prep_apart_from	-,-
prep_as_for	-,-
prep_away_from	-,-
prep_based_on	-,-
prep_because	-,-
prep_because_of	-,-
prep_before	-,-
prep_behind	-,-
prep_below	-,-
prep_beneath	-,-
prep_beside	-,-
prep_beyond	-,-
prep_but	-,-
prep_by_means_of	-,-
prep_close_to	-,-
prep_deserving	-,-
prep_down	-,-
prep_except	-,-
prep_except_for	-,-
prep_expressing	-,-
prep_far_from	-,-
prep_followed_by	-,-
prep_following	-,-
prep_half-baked	-,-
prep_if	-,-
prep_in_addition_to	-,-
prep_in_front_of	-,-
prep_in_spite_of	-,-
prep_including	-,-
prep_inside	-,-
prep_instead_of	-,-
prep_involving	-,-
prep_near	-,-
prep_near_to	-,-
prep_nearest	-,-
prep_off	-,-
prep_on_top_of	-,-
prep_onto	-,-
prep_opposite	-,-
prep_out	-,-
prep_outside	-,-
prep_past	-,-
prep_per	-,-
prep_pro	-,-
prep_showing	-,-
prep_since	-,-
prep_someone	-,-
prep_that	-,-
prep_through	-,-
prep_together_with	-,-
prep_under	-,-
prep_until	-,-
prep_up	-,-
prep_upon	-,-
prep_using	-,-
prep_veiled	-,-
prep_while	-,-
prep_without	-,-
prep_worth	-,-
prepc_according_to	-,-
prepc_after	-,-
prepc_against	-,-
prepc_along	-,-
prepc_around	-,-
prepc_as_of	-,-
prepc_at	-,-
prepc_away_from	-,-
prepc_based_on	-,-
prepc_because_of	-,-
prepc_before	-,-
prepc_but	-,-
prepc_compared_to	-,-
prepc_compared_with	-,-
prepc_during	-,-
prepc_except_for	-,-
prepc_far_from	-,-
prepc_in_addition_to	-,-
prepc_in_spite_of	-,-
prepc_including	-,-
prepc_inside	-,-
prepc_instead_of	-,-
prepc_into	-,-
prepc_like	-,-
prepc_on	-,-
prepc_onto	-,-
prepc_out_of	-,-
prepc_outside	-,-
prepc_over	-,-
prepc_such_as	-,-
prepc_than	-,-
prepc_through	-,-
prepc_to	-,-
prepc_together_with	-,-
prepc_towards	-,-
prepc_until	-,-
prepc_up	-,-
prepc_while	-,-


############################################################
# Universal Dependencies
# Some lines may occur above, these are commented out below.
############################################################

# clausal modifier of noun
acl	-,-
acl:about	-,-
acl:after	-,-
acl:as	-,-
acl:at	-,-
acl:based_on	-,-
acl:before	-,-
acl:between	-,-
acl:by	-,-
acl:compared_to	-,-
acl:compared_with	-,-
acl:except_for	-,-
acl:for	-,-
acl:from	-,-
acl:in	-,-	IN
acl:in_order	-,-
acl:including	-,-
acl:inside	-,-
acl:like	-,-
acl:near	-,-
acl:next_to	-,-
acl:of	-,-
acl:on	-,-
acl:out_of	-,-
acl:rather_than	-,-
acl:relcl	-,-
acl:than	-,-
acl:through	-,-
acl:to	-,-
acl:with	-,-	INSTRUMENT
acl:without	-,-	LACK

# adverbial clause modifier
advcl	0,-
advcl:about	-,-
advcl:according_to	-,-
advcl:around	-,-
advcl:as	-,-
advcl:at	-,-
advcl:away_from	-,-
advcl:based_on	-,-
advcl:because_of	-,-
advcl:but	-,-
advcl:by	-,-
advcl:compared_to	-,-
advcl:compared_with	-,-
advcl:existing	-,-
advcl:for	-,-
advcl:from	-,-
advcl:in	-,-
advcl:in_order	-,-
advcl:instead_of	-,-
advcl:into	-,-
advcl:of	-,-
advcl:on	-,-
advcl:onto	-,-
advcl:out	-,-
advcl:out_of	-,-
advcl:rather_than	-,-
advcl:than	-,-
advcl:to	-,-
advcl:towards	-,-
advcl:under	-,-
advcl:with	-,-	INSTRUMENT
advcl:without	-,-	LACK

# adverbial modifier
# advmod	0,-

# adjectival modifier
# amod	0,-

# appositional modifier
# appos	0,0

# auxiliary
# aux	-,-

# passive auxiliary
# auxpass	-,-

# case making
case	-,-

# coordination
# cc	-,-

# preconjunct
cc:preconj	-,-

# clausal complement
ccomp	2,-

# compund
compound	-,-

# phrasal verb particle
compound:prt	0,-

# conj	-,-
conj:and	-,-
conj:but	-,-
conj:if	-,-
conj:negcc	-,-
conj:nor	-,-
conj:not	-,-
conj:of	-,-
conj:or	-,-
conj:so	-,-
conj:well	-,-

# cop	-,-
#but will be necessary to disambiguate nsubj and csubj

# clausal subject
# csubj	1,0
# 1,0 for copular sentences, 1,- otherwise (just like with nsubj)

# clausal passive subject
# csubjpass	2,-

# dep	0,-

# det	?,?
#Articles will probably trigger some direct action and not have their own nodes
#in the graph

# det:predet	-,-
# discourse	-,-

# direct object
# dobj	2,-

# expl	-,-
# iobj	?,?
mark	-,-

# mwe	-,-
#We should handle each of these uniquely

# neg	0,-
#Mostly X -0-> "not". "no", "never", and "n't" are posptrocessed into "not"

# nominal modifiers
nmod	0,-
nmod:'	-,-	HAS
nmod:'s	-,-	HAS
nmod:about	-,-
nmod:above	-,-
nmod:according_to	-,-
nmod:across	-,-
nmod:after	-,-	AFTER
nmod:against	-,-
nmod:agent	-,-
nmod:ahead_of	-,-
nmod:along	-,-
nmod:among	-,-
nmod:apart_from	-,-
nmod:around	-,-
nmod:as	-,-
nmod:at	-,-
nmod:away_from	-,-
nmod:based_on	-,-
nmod:because	-,-
nmod:because_of	-,-
nmod:before	-,-
nmod:behind	-,-
nmod:below	-,-
nmod:beneath	-,-
nmod:beside	-,-
nmod:between	-,-
nmod:beyond	-,-
nmod:but	-,-
nmod:by	-,-
nmod:close_to	-,-
nmod:containing	-,-
nmod:down	-,-
nmod:during	-,-
nmod:except	-,-
nmod:except_for	-,-
nmod:far_from	-,-
nmod:following	-,-
nmod:for	-,-	FOR
nmod:from	-,-
nmod:given	-,-
nmod:if	-,-
nmod:in	-,-	IN
nmod:in_addition_to	-,-
nmod:in_front_of	-,-
nmod:in_order	-,-
nmod:including	-,-
nmod:inside	-,-
nmod:inside_of	-,-
nmod:instead_of	-,-
nmod:into	-,-
nmod:involving	-,-
nmod:less	-,-
nmod:like	-,-
nmod:near	-,-
nmod:nearest	-,-
nmod:next_to	-,-

# noun phrase as adverbial modifier
nmod:npmod	0,-

nmod:of	-,-	!HAS
nmod:off	-,-
nmod:on	-,-
nmod:onto	-,-
nmod:opposite	-,-
nmod:or	-,-
nmod:out	-,-
nmod:out_of	-,-	NOTIN
nmod:outside	-,-
nmod:outside_of	-,-
nmod:over	-,-
nmod:past	-,-
nmod:per	-,-
nmod:poss	-,-	!HAS
nmod:rather_than	-,-
nmod:since	-,-
nmod:subsides	-,-
nmod:such_as	-,-
nmod:than	-,-
nmod:that	-,-
nmod:through	-,-
nmod:tmod	-,-	AT
nmod:to	-,-
nmod:together_with	-,-
nmod:towards	-,-
nmod:under	-,-
nmod:until	-,-
nmod:up	-,-
nmod:using	-,-
nmod:while	-,-
nmod:with	-,-	INSTRUMENT
nmod:within	-,-
nmod:without	-,-

# nominal subject
# nsubj	1,0

# passive nominal subject
# nsubjpass	2,-

# numeric modifier
nummod	0,-

# parataxis	?,?
# ref	-,-

# root	-,-
# tells us what the predicate is

# open clausal complement
# xcomp	2,-
